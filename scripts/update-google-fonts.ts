#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import node_fetch from 'node-fetch';

type FontData = {
  weights?: string[];
  styles?: string[];
};

type Font = {
  family: string;
  fonts: {
    [variant: string]: any;
  };
};

type FontRes = {
  familyMetadataList: Font[];
};

const formatUnion = (values: string[]) =>
  values.map((value) => `"${value}"`).join('|');

(async () => {
  const response = await node_fetch('https://fonts.google.com/metadata/fonts');
  const { familyMetadataList }: FontRes = await response.json();
  let fontTypes = `
  // This is an autogenerated file, do not edit manually

  import { useFont } from './useFont';

  `;

  const fontData: Record<string, FontData> = {};

  for (let { family, fonts } of familyMetadataList) {
    const weights = new Set<string>();
    const styles = new Set<string>();

    for (const variant of Object.keys(fonts)) {
      if (variant.endsWith('i')) {
        styles.add('italic');
        weights.add(variant.slice(0, -1));
      } else {
        styles.add('normal');
        weights.add(variant);
      }
    }

    fontData[family] = {
      weights: [...weights],
      styles: [...styles],
    };

    const weightTypes = [...weights];
    const styleTypes = [...styles];

    fontTypes += `export const use${family.replaceAll(' ', '_')} = (args: {
    weight: ${formatUnion(weightTypes)} | Array<${formatUnion(weightTypes)}>
    style?: ${formatUnion(styleTypes)} | Array<${formatUnion(styleTypes)}>
    }) => useFont<typeof args>({
    fontFamily: "${family.replaceAll(' ', '_')}",
    options: args,
  })
    `;
  }

  await Promise.all([
    fs.writeFile(
      path.join(__dirname, '../src/font/google-fonts/index.ts'),
      fontTypes
    ),
    fs.writeFile(
      path.join(__dirname, '../src/font/google-fonts/font-data.json'),
      JSON.stringify(fontData)
    ),
  ]);
})();
